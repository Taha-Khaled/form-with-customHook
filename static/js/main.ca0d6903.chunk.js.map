{"version":3,"sources":["hooks/use-form.js","components/BasicForm.js","App.js","index.js"],"names":["useForm","checkValidity","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueReset","onBlurHandler","onChangeValueHandler","event","target","value","BasicForm","props","isNotEmpty","trim","FnameValue","FnamehasError","FnameIsValid","FnameInputReset","FnameInputBlurHandler","FnameChangeHandler","LnameValue","LnamehasError","LnameIsValid","LnameInputReset","LnameInputBlurHandler","LnameChangeHandler","match","emailValue","emailhasError","emailIsValid","emailInputReset","emailInputBlurHandler","emailChangeHandler","formValidity","onSubmit","preventDefault","className","htmlFor","type","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"uJA8BeA,EA7BC,SAACC,GACf,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAgBnC,MAAO,CACLA,eACAK,UAjBgBD,GAAgBF,EAkBhCE,eACAE,WARiB,WACjBL,EAAgB,IAChBE,GAAa,IAObI,cAboB,WACpBJ,GAAa,IAabK,qBAnB2B,SAACC,GAC5BR,EAAgBQ,EAAMC,OAAOC,OAC7BR,GAAa,M,OCqFFS,EA7FG,SAACC,GACjB,IAAMC,EAAa,SAACH,GAAD,MAA4B,KAAjBA,EAAMI,QAGpC,EAOIlB,EAAQiB,GANIE,EADhB,EACEhB,aACUiB,EAFZ,EAEEZ,SACca,EAHhB,EAGEd,aACYe,EAJd,EAIEb,WACec,EALjB,EAKEb,cACsBc,EANxB,EAMEb,qBAGF,EAOIX,EAAQiB,GANIQ,EADhB,EACEtB,aACUuB,EAFZ,EAEElB,SACcmB,EAHhB,EAGEpB,aACYqB,EAJd,EAIEnB,WACeoB,EALjB,EAKEnB,cACsBoB,EANxB,EAMEnB,qBAGF,EAOIX,GA3BY,SAACc,GAAD,OAAWA,EAAMiB,MAAM,mBAqBvBC,EADhB,EACE7B,aACU8B,EAFZ,EAEEzB,SACc0B,EAHhB,EAGE3B,aACY4B,EAJd,EAIE1B,WACe2B,EALjB,EAKE1B,cACsB2B,EANxB,EAME1B,qBAGE2B,GAAe,EACfjB,GAAgBM,GAAgBO,IAAcI,GAAe,GAQjE,OACE,uBAAMC,SARgB,SAAC3B,GACvBA,EAAM4B,iBACDF,IACLhB,IACAM,IACAO,MAGA,UACE,sBAAKM,UAAU,gBAAf,UACE,sBACEA,UAAWrB,EAAgB,uBAAyB,eADtD,UAGE,uBAAOsB,QAAQ,SAAf,wBACA,uBACEC,KAAK,OACLC,GAAG,SACH9B,MAAOK,EACP0B,SAAUrB,EACVsB,OAAQvB,IAETH,GACC,mBAAGqB,UAAU,aAAb,0CAIJ,sBACEA,UAAWf,EAAgB,uBAAyB,eADtD,UAGE,uBAAOgB,QAAQ,SAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,SACH9B,MAAOW,EACPoB,SAAUf,EACVgB,OAAQjB,IAETH,GACC,mBAAGe,UAAU,aAAb,4CAIN,sBAAKA,UAAWR,EAAgB,uBAAyB,eAAzD,UACE,uBAAOS,QAAQ,QAAf,4BACA,uBACEC,KAAK,QACLC,GAAG,QACH9B,MAAOkB,EACPa,SAAUR,EACVS,OAAQV,IAETH,GAAiB,mBAAGQ,UAAU,aAAb,6BAEpB,qBAAKA,UAAU,eAAf,SACE,wBAAQM,UAAWT,EAAnB,0BC9EOU,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCDNQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.ca0d6903.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nconst useForm = (checkValidity) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = checkValidity(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n\r\n  const onChangeValueHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const onBlurHandler = () => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const valueReset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n  return {\r\n    enteredValue,\r\n    hasError,\r\n    valueIsValid,\r\n    valueReset,\r\n    onBlurHandler,\r\n    onChangeValueHandler,\r\n  };\r\n};\r\nexport default useForm;\r\n","import useForm from \"../hooks/use-form\";\n\nconst BasicForm = (props) => {\n  const isNotEmpty = (value) => value.trim() !== \"\";\n  const isEmail = (value) => value.match(/\\S+@\\S+\\.\\S+/);\n  //first name hook\n  const {\n    enteredValue: FnameValue,\n    hasError: FnamehasError,\n    valueIsValid: FnameIsValid,\n    valueReset: FnameInputReset,\n    onBlurHandler: FnameInputBlurHandler,\n    onChangeValueHandler: FnameChangeHandler,\n  } = useForm(isNotEmpty);\n  //sec name hook\n  const {\n    enteredValue: LnameValue,\n    hasError: LnamehasError,\n    valueIsValid: LnameIsValid,\n    valueReset: LnameInputReset,\n    onBlurHandler: LnameInputBlurHandler,\n    onChangeValueHandler: LnameChangeHandler,\n  } = useForm(isNotEmpty);\n  //email hook\n  const {\n    enteredValue: emailValue,\n    hasError: emailhasError,\n    valueIsValid: emailIsValid,\n    valueReset: emailInputReset,\n    onBlurHandler: emailInputBlurHandler,\n    onChangeValueHandler: emailChangeHandler,\n  } = useForm(isEmail);\n\n  let formValidity = false;\n  if (FnameIsValid && LnameIsValid && emailIsValid) formValidity = true;\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    if (!formValidity) return;\n    FnameInputReset();\n    LnameInputReset();\n    emailInputReset();\n  };\n  return (\n    <form onSubmit={onSubmitHandler}>\n      <div className=\"control-group\">\n        <div\n          className={FnamehasError ? \"form-control invalid\" : \"form-control\"}\n        >\n          <label htmlFor=\"f-name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"f-name\"\n            value={FnameValue}\n            onChange={FnameChangeHandler}\n            onBlur={FnameInputBlurHandler}\n          />\n          {FnamehasError && (\n            <p className=\"error-text\">First Name Can't be empty</p>\n          )}\n        </div>\n\n        <div\n          className={LnamehasError ? \"form-control invalid\" : \"form-control\"}\n        >\n          <label htmlFor=\"s-name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"s-name\"\n            value={LnameValue}\n            onChange={LnameChangeHandler}\n            onBlur={LnameInputBlurHandler}\n          />\n          {LnamehasError && (\n            <p className=\"error-text\">Last Name Can't be empty</p>\n          )}\n        </div>\n      </div>\n      <div className={emailhasError ? \"form-control invalid\" : \"form-control\"}>\n        <label htmlFor=\"email\">E-mail Address</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={emailValue}\n          onChange={emailChangeHandler}\n          onBlur={emailInputBlurHandler}\n        />\n        {emailhasError && <p className=\"error-text\">Wrong E-mail</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formValidity}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","//import SimpleInput from \"./components/SimpleInput\";\nimport BasicForm from \"./components/BasicForm\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}